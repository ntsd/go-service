// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	models "go-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateClient mocks base method.
func (m *MockStorage) CreateClient(client *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockStorageMockRecorder) CreateClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockStorage)(nil).CreateClient), client)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), user)
}

// GetClientByID mocks base method.
func (m *MockStorage) GetClientByID(client *models.Client, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByID", client, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClientByID indicates an expected call of GetClientByID.
func (mr *MockStorageMockRecorder) GetClientByID(client, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByID", reflect.TypeOf((*MockStorage)(nil).GetClientByID), client, id)
}

// GetUserByID mocks base method.
func (m *MockStorage) GetUserByID(user *models.User, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", user, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockStorageMockRecorder) GetUserByID(user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockStorage)(nil).GetUserByID), user, id)
}

// ListUsers mocks base method.
func (m *MockStorage) ListUsers(users *[]models.User, offset, limit int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", users, offset, limit, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStorageMockRecorder) ListUsers(users, offset, limit, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStorage)(nil).ListUsers), users, offset, limit, name)
}

// UpdateUserByID mocks base method.
func (m *MockStorage) UpdateUserByID(user *models.User, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", user, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockStorageMockRecorder) UpdateUserByID(user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockStorage)(nil).UpdateUserByID), user, id)
}
